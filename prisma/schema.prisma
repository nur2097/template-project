// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemUserRole {
  SUPERADMIN
  ADMIN
  MODERATOR
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Multi-tenant Company model
model Company {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  domain    String?       @unique
  status    CompanyStatus @default(ACTIVE)
  settings  Json?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relations
  users         User[]
  roles         Role[]
  permissions   Permission[]
  devices       Device[]
  refreshTokens RefreshToken[]
  invitations   CompanyInvitation[]

  @@map("companies")
}

// RBAC Permission model
model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  resource    String
  action      String
  companyId   Int      @map("company_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  roles   RolePermission[]

  @@unique([name, companyId])
  @@map("permissions")
}

// RBAC Role model
model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  companyId   Int      @map("company_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  permissions RolePermission[]
  users       UserRole[]

  @@unique([name, companyId])
  @@map("roles")
}

// Role-Permission junction table
model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// User-Role junction table
model UserRole {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  roleId Int @map("role_id")

  // Relations
  user User @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Device tracking model
model Device {
  id           String   @id @default(cuid())
  deviceId     String   @map("device_id")
  deviceType   String   @map("device_type")
  deviceName   String?  @map("device_name")
  browser      String?
  os           String?
  ip           String?
  userAgent    String?  @map("user_agent")
  userId       Int      @map("user_id")
  companyId    Int      @map("company_id")
  isActive     Boolean  @default(true) @map("is_active")
  lastAccessAt DateTime @default(now()) @map("last_access_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user          User           @relation("UserDevices", fields: [userId], references: [id], onDelete: Cascade)
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]

  @@unique([deviceId, userId])
  @@index([userId])
  @@index([companyId])
  @@index([isActive])
  @@map("devices")
}

// Refresh Token model
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int      @map("user_id")
  companyId Int      @map("company_id")
  deviceId  String   @map("device_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  device  Device  @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  firstName         String         @map("first_name")
  lastName          String         @map("last_name")
  password          String
  systemRole        SystemUserRole @default(USER) @map("system_role")
  status            UserStatus     @default(ACTIVE)
  avatar            String?
  phoneNumber       String?        @map("phone_number")
  emailVerified     Boolean        @default(false) @map("email_verified")
  emailVerifiedAt   DateTime?      @map("email_verified_at")
  lastLoginAt       DateTime?      @map("last_login_at")
  passwordChangedAt DateTime?      @map("password_changed_at")
  companyId         Int            @map("company_id")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  deletedAt         DateTime?      @map("deleted_at")

  // Relations
  company        Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  roles          UserRole[]          @relation("UserRoles")
  sessions       UserSession[]       @relation("UserSessions")
  devices        Device[]            @relation("UserDevices")
  refreshTokens  RefreshToken[]      @relation("UserRefreshTokens")
  passwordResets PasswordReset[]     @relation("UserPasswordResets")
  createdInvitations CompanyInvitation[] @relation("InvitationCreatedBy")

  @@index([companyId])
  @@index([status])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@map("users")
}

// Password Reset Model
model PasswordReset {
  id        String   @id @default(cuid())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation("UserPasswordResets", fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// User Sessions Model
model UserSession {
  id          String   @id @default(cuid())
  userId      Int      @map("user_id")
  sessionData Json     @map("session_data")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Company Invitation Model
model CompanyInvitation {
  id           Int                      @id @default(autoincrement())
  email        String
  code         String                   @unique
  role         SystemUserRole          @default(USER)
  status       CompanyInvitationStatus @default(PENDING)
  invitedBy    Int                     @map("invited_by")
  companyId    Int                     @map("company_id")
  expiresAt    DateTime                @map("expires_at")
  acceptedAt   DateTime?               @map("accepted_at")
  rejectedAt   DateTime?               @map("rejected_at")
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")

  // Relations
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  inviter    User    @relation("InvitationCreatedBy", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, companyId])
  @@index([companyId])
  @@index([status])
  @@index([expiresAt])
  @@map("company_invitations")
}

enum CompanyInvitationStatus {
  PENDING
  ACCEPTED  
  REJECTED
  EXPIRED
}

// Rate Limiting Model
model RateLimit {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  points    Int      @default(0)
  expiresAt DateTime @map("expires_at")

  @@map("rate_limits")
}
